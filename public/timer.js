// =========================
// TEXTS: UI ÌÖçÏä§Ìä∏ Î™®Ïùå
// =========================
const TEXTS = {
    timerPage: {
        backToMain: "‚Üê Î©îÏù∏ÏúºÎ°ú",
        start: "ÏãúÏûë",
        pause: "ÏùºÏãúÏ†ïÏßÄ",
        reset: "Î¶¨ÏÖã",
        autoRepeat: "ÏûêÎèô Î∞òÎ≥µ",
        labels: {
            minute: "Î∂Ñ",
            second: "Ï¥à"
        },
        initialDisplay: "00:00",
        adjust: {
            60: "+1Î∂Ñ",
            600: "+10Î∂Ñ",
            1800: "+30Î∂Ñ",
            "-60": "-1Î∂Ñ",
            "-600": "-10Î∂Ñ",
            "-1800": "-30Î∂Ñ",
            1: "+1Ï¥à",
            10: "+10Ï¥à",
            30: "+30Ï¥à",
            "-1": "-1Ï¥à",
            "-10": "-10Ï¥à",
            "-30": "-30Ï¥à"
        },
        alarms: {
            mute: "üîá",
            beep: "üîî",
            cackle: "üêî"
        }
    }
};

// =========================
// DOM ÏöîÏÜå ÏÑ†ÌÉù
// =========================
let timer = null;
let remainingTime = 0;    // ÌòÑÏû¨ ÎÇ®ÏùÄ ÏãúÍ∞Ñ (Ï¥à Îã®ÏúÑ)
let lastSetTime = 0;      // ÏÑ§Ï†ï ÏãúÍ∞Ñ (Ï¥à Îã®ÏúÑ)

const backToMainBtn = document.getElementById("backToMain");
const timerDisplay = document.getElementById("timerDisplay");
const minuteInput = document.getElementById("minuteInput");
const secondInput = document.getElementById("secondInput");
const startBtn = document.getElementById("startBtn");
const pauseBtn = document.getElementById("pauseBtn");
const resetBtn = document.getElementById("resetBtn");
const adjustButtons = document.querySelectorAll("[data-adjust]");
const minuteLabel = document.getElementById("minuteLabel");
const secondLabel = document.getElementById("secondLabel");
const autoRepeatLabel = document.getElementById("autoRepeatLabel");
const autoRepeatCheckbox = document.getElementById("autoRepeat");

// ÏïåÎûå
const alarmOverlay = document.getElementById("alarmOverlay");
const alarmBeep = document.getElementById("alarmBeep");
const alarmCackle = document.getElementById("alarmCackle");

// =========================
// Î≥¥Ï°∞ Ìï®Ïàò
// =========================
function setControlsDisabled(disabled) {
    minuteInput.disabled = disabled;
    secondInput.disabled = disabled;
    adjustButtons.forEach(btn => (btn.disabled = disabled));
}

function updateDisplay() {
    const minutes = Math.floor(remainingTime / 60);
    const seconds = remainingTime % 60;
    timerDisplay.textContent = `${String(minutes).padStart(2, "0")}:${String(seconds).padStart(2, "0")}`;
}

function applyInputToTime() {
    const mins = parseInt(minuteInput.value || 0, 10);
    const secs = parseInt(secondInput.value || 0, 10);
    lastSetTime = Math.max(0, mins * 60 + secs);
    remainingTime = lastSetTime;
    updateDisplay();
}

function adjustTime(sec) {
    lastSetTime = Math.max(0, lastSetTime + sec);
    minuteInput.value = Math.floor(lastSetTime / 60);
    secondInput.value = lastSetTime % 60;
    remainingTime = lastSetTime;
    updateDisplay();
}

function getSelectedAlarm() {
    const selected = document.querySelector('input[name="alarmType"]:checked').value;
    if (selected === "beep") return alarmBeep;
    if (selected === "cackle") return alarmCackle;
    return null; // ÏùåÏÜåÍ±∞
}

// =========================
// ÌÉÄÏù¥Î®∏ Í∏∞Îä•
// =========================
function startTimer() {
    if (lastSetTime <= 0) return;

    clearInterval(timer);
    remainingTime = lastSetTime;
    setControlsDisabled(true);
    updateDisplay();

    timer = setInterval(() => {
        remainingTime--;
        updateDisplay();

        if (remainingTime <= 0) {
            clearInterval(timer);
            timer = null;
            triggerAlarm();

            if (autoRepeatCheckbox.checked && lastSetTime > 0) {
                remainingTime = lastSetTime;
                startTimer();
            } else {
                setControlsDisabled(false);
            }
        }
    }, 1000);
}

function pauseTimer() {
    clearInterval(timer);
    timer = null;
    setControlsDisabled(false);
}

function resetTimer() {
    clearInterval(timer);
    timer = null;
    remainingTime = 0;
    lastSetTime = 0;
    minuteInput.value = 0;
    secondInput.value = 0;
    updateDisplay();
    setControlsDisabled(false);
    stopAlarm();
}

// =========================
// ÏïåÎûå Í∏∞Îä•
// =========================
function triggerAlarm() {
    timerDisplay.classList.add("alarm");
    alarmOverlay.classList.add("active");

    const sound = getSelectedAlarm();
    if (sound) {
        sound.currentTime = 0;
        sound.play().catch(err => console.log("ÏÇ¨Ïö¥Îìú ÏûêÎèôÏû¨ÏÉù Ï†úÌïú:", err));
    }

    setTimeout(stopAlarm, 3000);
}

function stopAlarm() {
    timerDisplay.classList.remove("alarm");
    alarmOverlay.classList.remove("active");

    [alarmBeep, alarmCackle].forEach(sound => {
        sound.pause();
        sound.currentTime = 0;
    });
}

// =========================
// UI ÌÖçÏä§Ìä∏ Ï†ÅÏö©
// =========================
function applyTexts() {
    // Ìó§Îçî Î≤ÑÌäº
    backToMainBtn.textContent = TEXTS.timerPage.backToMain;

    // Ï¥àÍ∏∞ ÌÉÄÏù¥Î®∏ ÌëúÏãú
    timerDisplay.textContent = TEXTS.timerPage.initialDisplay;

    // ÏûÖÎ†• ÌïÑÎìú ÎùºÎ≤®
    minuteLabel.textContent = TEXTS.timerPage.labels.minute;
    secondLabel.textContent = TEXTS.timerPage.labels.second;

    // Î©îÏù∏ Î≤ÑÌäº
    startBtn.textContent = TEXTS.timerPage.start;
    pauseBtn.textContent = TEXTS.timerPage.pause;
    resetBtn.textContent = TEXTS.timerPage.reset;

    // ÏûêÎèô Î∞òÎ≥µ Ï≤¥ÌÅ¨Î∞ïÏä§ ÎùºÎ≤®
    autoRepeatLabel.textContent = TEXTS.timerPage.autoRepeat;

    // Î∂Ñ/Ï¥à Ï°∞Ï†à Î≤ÑÌäº
    adjustButtons.forEach(btn => {
        const key = String(btn.dataset.adjust);
        if (TEXTS.timerPage.adjust[key]) {
            btn.textContent = TEXTS.timerPage.adjust[key];
        }
    });

    // ÏïåÎûå ÏÑ†ÌÉù ÏïÑÏù¥ÏΩò
    document.querySelector('label[for="alarmMute"] .icon').textContent = TEXTS.timerPage.alarms.mute;
    document.querySelector('label[for="alarmBeepOpt"] .icon').textContent = TEXTS.timerPage.alarms.beep;
    document.querySelector('label[for="alarmCackleOpt"] .icon').textContent = TEXTS.timerPage.alarms.cackle;
}

// =========================
// Ïù¥Î≤§Ìä∏ Î∞îÏù∏Îî©
// =========================
minuteInput.addEventListener("input", applyInputToTime);
secondInput.addEventListener("input", applyInputToTime);
adjustButtons.forEach(btn =>
    btn.addEventListener("click", () => adjustTime(parseInt(btn.dataset.adjust)))
);
startBtn.addEventListener("click", startTimer);
pauseBtn.addEventListener("click", pauseTimer);
resetBtn.addEventListener("click", resetTimer);
backToMainBtn.addEventListener("click", () => {
    location.href = "/";
});

// =========================
// Ï¥àÍ∏∞ Ïã§Ìñâ
// =========================
document.addEventListener("DOMContentLoaded", () => {
    applyTexts();
    updateDisplay();
});
